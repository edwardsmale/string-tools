{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/command-parsing.service.ts","webpack:///src/app/command-types.service.ts","webpack:///src/app/command.service.ts","webpack:///src/app/text-utils.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","commandService","textUtilsService","h1","outputValue","explain","UpdateExplanation","codePaneRef","nativeElement","value","inputPaneRef","ProcessClick","codeValue","inputValue","lines","processCommands","LinesToText","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","CommandParsingService","commandTypesService","codeLine","trim","length","undefined","codeLineSplit","split","commandName","commandType","FindCommandType","para","replace","providedIn","CommandTypesService","name","i","CommandTypes","RegExp","test","desc","exec","context","regex","AsScalar","searchString","bind","defaultDelimiter","isTabDelimited","delimiter","formattedDelimiter","FormatDelimiter","splitValues","isColumnNumeric","IsNumeric","filter","val","includes","indices","ParseIntegers","positions","push","toString","Math","abs","join","AsArray","result","index","parseInt","leftChar","rightChar","scalarValue","options","isDoubleQuote","isSingleQuote","isAtString","isEscaped","explanation","toDelimitedString","arrayValue","String","fromCharCode","CommandService","commandParsingService","codeLines","TextToLines","j","k","IsTabDelimited","currentValues","parsedCommand","ParseCodeLine","newValues","IsPositiveInteger","flattened","batchSize","batches","newLineValue","outputLines","TextUtilsService","integers","countTabs","line","match","tabsPerLine","pluralise","formatDelimiterSingular","text","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { \r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  ElementRef,\r\n  AfterViewChecked } from \"@angular/core\";\r\nimport { CommandService } from './command.service';\r\nimport { TextUtilsService } from './text-utils.service';\r\n\r\n@Component({\r\n  selector: \"app-root\",\r\n  templateUrl: \"./app.component.html\",\r\n  styleUrls: [\"./app.component.scss\"]\r\n})\r\nexport class AppComponent implements OnInit, AfterViewChecked {\r\n  @ViewChild(\"codePane\") codePaneRef: ElementRef;\r\n  @ViewChild(\"inputPane\") inputPaneRef: ElementRef;\r\n  h1 = \"string-tools\";\r\n  outputValue = \"\";\r\n  explain = \"\";\r\n\r\n  constructor(private commandService : CommandService, private textUtilsService : TextUtilsService) {\r\n    this.commandService = commandService;\r\n    this.textUtilsService = textUtilsService;\r\n  }\r\n\r\n  ngOnInit() {  }\r\n\r\n  ngAfterViewChecked() {\r\n    this.UpdateExplanation(\r\n      this.codePaneRef.nativeElement.value, \r\n      this.inputPaneRef.nativeElement.value\r\n    );\r\n    this.ProcessClick(\r\n      this.codePaneRef.nativeElement.value, \r\n      this.inputPaneRef.nativeElement.value\r\n    );\r\n  }\r\n\r\n  UpdateExplanation(codeValue: string, inputValue: string) {\r\n    var lines = this.commandService.processCommands(codeValue, inputValue, true);\r\n    this.explain = this.textUtilsService.LinesToText(lines);\r\n  }\r\n\r\n  ProcessClick(codeValue: string, inputValue: string) {\r\n    var lines = this.commandService.processCommands(codeValue, inputValue, false);\r\n    this.outputValue = this.textUtilsService.LinesToText(lines);\r\n  }\r\n} ","<div>\r\n  <div class=\"string-tools\">\r\n    <div class=\"string-tools__top_section\">\r\n      <textarea class=\"code-window\" #codePane \r\n        (input)=\"UpdateExplanation(codePane.value, inputPane.value);ProcessClick(codePane.value, inputPane.value);\">\r\nsplit ,\r\nat 1, 2\r\ncsv '\r\nenclose\r\nflat\r\ncsv\r\nprint INSERT INTO Account (AccountRef, Company) VALUES $0</textarea>\r\n      <textarea class=\"explain-window\" readonly>{{ explain }}</textarea>\r\n    </div>\r\n    <div class=\"panes-container\">\r\n      <div class=\"pane pane--left\">\r\n        <textarea class=\"pane-textarea\" #inputPane\r\n          (input)=\"ProcessClick(codePane.value, inputPane.value);\">\r\n1,W22355,foo\r\n2,X13989,bar\r\n3,Y22492,baz\r\n        </textarea>\r\n      </div>\r\n      <div class=\"pane pane--right\" #outputPane>\r\n        <textarea class=\"pane-textarea\" readonly>{{ outputValue }}</textarea>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div> ","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\r\nimport { isArray } from \"util\";\r\nimport { TextUtilsService } from './text-utils.service';\r\nimport { CommandTypesService } from './command-types.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommandParsingService {\r\n\r\n  constructor(private textUtilsService : TextUtilsService, private commandTypesService : CommandTypesService) {\r\n    this.textUtilsService = textUtilsService;\r\n    this.commandTypesService = commandTypesService;\r\n  }\r\n\r\n  ParseCodeLine(codeLine: string) {\r\n    var codeLine = codeLine.trim();\r\n    if (codeLine.length === 0) {\r\n      return undefined;\r\n    } else {\r\n      var codeLineSplit = codeLine.split(/\\s+/);\r\n      var commandName = codeLineSplit[0];\r\n      var commandType = this.commandTypesService.FindCommandType(commandName);\r\n      var para = codeLine.replace(commandName, \"\").trim();\r\n      return {\r\n        commandType: commandType,\r\n        para: para\r\n      };\r\n    }\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { isArray } from \"util\";\r\nimport { TextUtilsService } from './text-utils.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommandTypesService {\r\n\r\n  constructor(private textUtilsService : TextUtilsService) { \r\n    this.textUtilsService = textUtilsService;\r\n  }\r\n\r\n  FindCommandType = function(name: string) {\r\n    var i: number;\r\n    for (i = 0; i < this.CommandTypes.length; i++) {\r\n      if (new RegExp(\"^\" + this.CommandTypes[i].name).test(name)) {\r\n        return this.CommandTypes[i];\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  CommandTypes = [\r\n    {\r\n      name: \"regex\",\r\n      desc: \"Sets the current regex\",\r\n      para: [\r\n        {\r\n          name: \"Regex\",\r\n          desc: \"String defining the regex\"\r\n        }\r\n      ],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        context.regex = this.textUtilsService.AsScalar(para);\r\n        context.searchString = null;\r\n        if (explain) {\r\n          return \"Set the current regex to \" + para;\r\n        } else {\r\n          return value;\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"searchString|search-string\",\r\n      desc: \"Sets the current search string\",\r\n      para: [\r\n        {\r\n          name: \"Search String\",\r\n          desc: \"The search string to set\"\r\n        }\r\n      ],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        context.searchString = this.textUtilsService.AsScalar(para);\r\n        context.regex = null;\r\n        if (explain) {\r\n          return \"Set the current search string to \" + para;\r\n        } else {\r\n          return value;\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"split\",\r\n      desc: \"Splits up the line of text.\",\r\n      para: [\r\n        {\r\n          name: \"Separator\",\r\n          desc: \"The string upon which to split.\"\r\n        }\r\n      ],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        value = this.textUtilsService.AsScalar(value);\r\n        var i: number;\r\n\r\n        if (!para && context.regex) {\r\n          if (explain) {\r\n            return \"Split the line using the regex \" + context.regex;\r\n          } else {\r\n            return (value as string).split(new RegExp(context.regex));\r\n          }\r\n        }\r\n        else if (!para && context.searchString) {\r\n          if (explain) {\r\n            return \"Split the line on '\" + context.searchString + \"'\";\r\n          } else {\r\n            return (value as string).split(context.searchString);\r\n          }\r\n        }\r\n        else {\r\n          var defaultDelimiter = context.isTabDelimited ? \"\\t\" : \",\";\r\n          para = para === \"\\\\t\" ? \"\\t\" : para;\r\n          var delimiter = para || defaultDelimiter;\r\n          \r\n          if (explain) {\r\n            var formattedDelimiter = this.textUtilsService.FormatDelimiter(delimiter, false);        \r\n            return \"Split the line on every \" + formattedDelimiter;\r\n          } else {\r\n\r\n            var splitValues = (value as string).split(new RegExp(delimiter));\r\n\r\n            for (i = 0; i < splitValues.length; i++) {\r\n              if (context.isColumnNumeric.length <= i) {\r\n                context.isColumnNumeric[i] = true;\r\n              }\r\n              \r\n              if (!this.textUtilsService.IsNumeric(splitValues[i])) {\r\n                context.isColumnNumeric[i] = false;\r\n              }\r\n            }\r\n\r\n            return splitValues;\r\n          }\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"match|filter\",\r\n      desc: \"Only lines which match a regex or search string\",\r\n      para: [\r\n        {\r\n          name: \"Search String\",\r\n          desc: \"The string which lines must contain\"\r\n        }\r\n      ],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n\r\n        var searchString = para || context.searchString;\r\n\r\n        if (!searchString && context.regex) {          \r\n          if (explain) {\r\n            return \"Only include lines matching the regex \" + context.regex;\r\n          } else {\r\n            if (isArray(value)) {\r\n              return (value as string[]).filter(function (val: string) { return new RegExp(context.regex).test(val); });\r\n            } else {\r\n              return new RegExp(context.regex).test(value as string) ? value : null;\r\n            }\r\n          }\r\n        }\r\n        else\r\n        {\r\n          if (explain) {\r\n            return \"Only include lines containing '\" + searchString + \"'\";\r\n          } else {\r\n            if (isArray(value)) {\r\n              return (value as string[]).filter(function (val: string) { return val.includes(searchString); });\r\n            } else {\r\n              return (value as string).includes(searchString) ? value : null;\r\n            }\r\n          }\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"nomatch|exclude\",\r\n      desc: \"Exclude lines that match a regex or search string\",\r\n      para: [\r\n        {\r\n          name: \"Regex\",\r\n          desc: \"The regex that lines must not match\"\r\n        }\r\n      ],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n\r\n        var regex = para || context.regex;\r\n\r\n        if (!regex && context.searchString) {\r\n          if (explain) {\r\n            return \"Exclude lines containing '\" + context.searchString + \"'\";\r\n          } else {\r\n            if (isArray(value)) {\r\n              return (value as string[]).filter(function (val: string) { return !val.includes(context.searchString); });\r\n            } else {\r\n              return (value as string).includes(context.searchString) ? null : value;\r\n            }\r\n          }\r\n        }\r\n        else\r\n        {\r\n          if (explain) {\r\n            return \"Exclude lines matching the regex \" + regex;\r\n          } else {\r\n            if (isArray(value)) {\r\n              return (value as string[]).filter(function (val: string) { return !new RegExp(regex).test(val); });\r\n            } else {\r\n              return new RegExp(regex).test(value as string) ? null : value;\r\n            }\r\n          }\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"at\",\r\n      desc: \"Selects specified columns from text that has been split.\",\r\n      para: [\r\n        {\r\n          name: \"Column Indices\",\r\n          desc: \"Zero-based. Use negatives to count back from the end.\"\r\n        }\r\n      ],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        if (explain) {\r\n          const indices = this.textUtilsService.ParseIntegers(para);\r\n          var positions: string[] = [];\r\n  \r\n          for (var i = 0; i < indices.length; i++) {\r\n            if (indices[i] >= 0) {\r\n              positions.push(\"[\" + indices[i].toString() + \"]\");\r\n            } else {\r\n              positions.push(\"[\" + Math.abs(indices[i]) + \" from the end\" + \"]\");\r\n            }\r\n          }\r\n          return \"Get the items at positions \" + positions.join(\" \");\r\n        } else {\r\n          value = this.textUtilsService.AsArray(value);\r\n          const indices = para.trim().split(/[^\\d\\-]+/);\r\n          var result = [];\r\n          var i: number;\r\n          for (i = 0; i < indices.length; i++) {\r\n            var index = parseInt(indices[i], 10);\r\n            if (index < 0) {\r\n              index = value.length + index;\r\n            }\r\n            if (index >= 0 && index < value.length) {\r\n              result.push(value[index]);\r\n            }\r\n          }\r\n\r\n          return result;\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"flat|batch\",\r\n      desc: \"Flattens an array of arrays into one array, or batches items into arrays of a given size\",\r\n      para: [        {\r\n        name: \"Batch Size\",\r\n        desc: \"If set, converts into batches of this size\"\r\n      }],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        if (explain) {\r\n          if (this.textUtilsService.IsNumeric(para)) {\r\n            return \"Convert into arrays of \" + para + \" items\";\r\n          } else {\r\n            return \"Flatten an array of arrays into one array\";\r\n          }\r\n        } else {\r\n          return value;\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"enclose\",\r\n      desc: \"Put some character(s) at the start and end of each line\",\r\n      para: [],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        var leftChar: string;\r\n        var rightChar: string;\r\n\r\n        if (para.length === 0) {\r\n          leftChar = \"(\";\r\n          rightChar = \")\";\r\n        } else if (para.length === 1) {\r\n          leftChar = para[0];\r\n          rightChar = para[0];\r\n        } else {\r\n          leftChar = para[0];\r\n          rightChar = para[1];          \r\n        }\r\n\r\n        if (explain) {\r\n          return \"Enclose each item in \" + leftChar + \"  \" + rightChar;\r\n        } else {\r\n          var scalarValue = this.textUtilsService.AsScalar(value);\r\n          return leftChar + scalarValue + rightChar;\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"tsv\",\r\n      desc: \"Tab-separates text that has been split.\",\r\n      para: [],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        if (explain) {\r\n          return \"Output the items in tab-separated format\";\r\n        } else {\r\n          value = this.textUtilsService.AsArray(value);\r\n          return (value as string[]).join(\"\\t\");\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"csv\",\r\n      desc: \"Delimits text which has been split.\",\r\n      para: [\r\n        {\r\n          name: \"'\",\r\n          desc: \"Enclose values in single quotes.\"\r\n        },\r\n        {\r\n          name: '\"',\r\n          desc: \"Enclose values in double quotes.\"\r\n        },\r\n        {\r\n          name: \"@\",\r\n          desc:\r\n            \"When values are enclosed in double quotes, precede \" +\r\n            \"opening double quotes with the @ symbol.\"\r\n        },\r\n        {\r\n          name: \"\\\\\",\r\n          desc:\r\n            \"When values are enclosed in double quotes, escape \" +\r\n            \"any double quotes within values with a backslash.\"\r\n        },\r\n        {\r\n          name: \"<anything else>\",\r\n          desc: \"The character(s) to use as the delimiter.\"\r\n        }\r\n      ],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        value = this.textUtilsService.AsArray(value);\r\n\r\n        var options = {\r\n          isDoubleQuote: para.includes('\"'),\r\n          isSingleQuote: para.includes(\"'\"),\r\n          isAtString: para.includes(\"@\"),\r\n          isEscaped: para.includes(\"\\\\\"),\r\n          delimiter: para.replace(/[\"'\\\\@]+/, \"\") || \",\"\r\n        };\r\n\r\n        if (para.includes(\"\\\\t\")) {\r\n          options.delimiter = \"\\t\";\r\n        }\r\n\r\n        if (explain) {\r\n\r\n          var explanation = \"Output the items\";\r\n\r\n          if (options.delimiter === \",\") {\r\n            explanation += \" in CSV format\";\r\n          } else {\r\n            var formattedDelimiter = this.textUtilsService.FormatDelimiter(options.delimiter, true);\r\n            explanation += \" separated with \" + formattedDelimiter;\r\n          }\r\n  \r\n          if (options.isDoubleQuote) {\r\n            explanation += \", with values in double quotes\"\r\n  \r\n            if (options.isAtString) {\r\n              explanation += \" preceded by @\"\r\n            }\r\n  \r\n            if (options.isEscaped) {\r\n              explanation += \", backslash-escaping any double quotes\";\r\n            } else {\r\n              explanation += \", doubling-up any double quotes\";\r\n            }\r\n          }\r\n          else if (options.isSingleQuote) {\r\n            explanation += \", with values in single quotes\"\r\n          }\r\n  \r\n          return explanation;\r\n\r\n        } else {\r\n\r\n          var toDelimitedString = function(value: string[], options) {\r\n            var result = [];\r\n            var i: number;\r\n            for (i = 0; i < value.length; i++) {\r\n              var val = value[i];\r\n              if (options.isDoubleQuote) { // || val.includes(options.delimiter)) {\r\n                if (options.isEscaped) {\r\n                  // Replace \" with \\\"\r\n                  val = val.replace(new RegExp('\"'), '\\\\\"');\r\n                  val = '\"' + val + '\"';\r\n                } else {\r\n                  // Replace \" with \"\"\r\n                  val = val.replace(new RegExp('\"'), '\"\"');\r\n                  val = '\"' + val + '\"';\r\n                  if (options.isAtString) {\r\n                    val = \"@\" + val;\r\n                  }\r\n                }\r\n              } else if (options.isSingleQuote) {\r\n                val = val.replace(new RegExp(\"'\"), \"''\");\r\n                val = \"'\" + val + \"'\";\r\n              }\r\n              result.push(val);\r\n            }\r\n            return result.join(options.delimiter);\r\n          };\r\n        }\r\n\r\n        return toDelimitedString((value as string[]), options);\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"join\",\r\n      desc: \"Joins a split line of text back together.\",\r\n      para: [\r\n        {\r\n          name: \"delimiter\",\r\n          desc: \"The delimiter to insert between items (default is tab).\"\r\n        }\r\n      ],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        value = this.textUtilsService.AsArray(value);\r\n        var defaultDelimiter = context.isTabDelimited ? \"\\t\" : \" \";\r\n        para = para === \"\\\\t\" ? \"\\t\" : para;\r\n        var delimiter = para || defaultDelimiter;\r\n\r\n        if (explain) {\r\n          var formattedDelimiter = this.textUtilsService.FormatDelimiter(delimiter, true);\r\n          return \"Output items separated with \" + formattedDelimiter + \" - doesn't escape \" + formattedDelimiter + \" in values\";\r\n        } else {\r\n          return (value as string[]).join(delimiter);\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"print\",\r\n      desc: \"Prints output\",\r\n      para: [{ name: \"<text>\", desc: \"What to print.\" }],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        if (explain) {\r\n          return \"print \" + para;\r\n        } else {\r\n          var result = para;\r\n          var i: number;\r\n          var arrayValue = isArray(value) ? (value as string[]) : ([ \"\", value ] as string[]);\r\n          \r\n          // Replace $0 with the whole value.\r\n          result = result.replace(new RegExp(\"\\\\$0\", \"g\"), arrayValue.join(\"\"));\r\n          \r\n          // Replace $1..$9 with the value at index 1..9.\r\n          for (i = 1; i <= 9; i++) {\r\n            if (i <= arrayValue.length) {\r\n              result = result.replace(new RegExp(\"\\\\$\" + i, \"g\"), arrayValue[i - 1]);\r\n            }\r\n          }\r\n          // Replace $-1..$-9 with the value -1..-9 from the end.\r\n          for (i = 1; i <= 9; i++) {\r\n            if (arrayValue.length - i >= 0) {\r\n              result = result.replace(\r\n                new RegExp(\"\\\\$-\" + i, \"g\"),\r\n                arrayValue[arrayValue.length - i]\r\n              );\r\n            }\r\n          }\r\n          // Replace $A..$Z and $a..$z with the value at index 10..35.\r\n          for (i = 0; i < 26; i++) {\r\n            if (i + 10 < arrayValue.length) {\r\n              result = result.replace(\r\n                new RegExp(\r\n                  \"\\\\$[\" +\r\n                    String.fromCharCode(i + 65) +\r\n                    String.fromCharCode(i + 97) +\r\n                    \"]\",\r\n                  \"g\"\r\n                ),\r\n                arrayValue[i + 10]\r\n              );\r\n            }\r\n          }\r\n          return result;\r\n        }\r\n      }).bind(this)\r\n    }\r\n  ];  \r\n}","import { Injectable } from '@angular/core';\r\nimport { isArray } from \"util\";\r\nimport { TextUtilsService } from './text-utils.service';\r\nimport { CommandParsingService } from './command-parsing.service';\r\nimport { CommandTypesService } from './command-types.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommandService {\r\n\r\n  constructor(private textUtilsService : TextUtilsService, private commandParsingService : CommandParsingService, private commandTypesService : CommandTypesService) {\r\n    this.textUtilsService = textUtilsService;\r\n    this.commandParsingService = commandParsingService;\r\n    this.commandTypesService = commandTypesService;\r\n  }\r\n  \r\n  processCommands(codeValue: string, inputValue: string, explain: boolean): string[] {\r\n    var codeLines = this.textUtilsService.TextToLines(codeValue);\r\n    var lines = this.textUtilsService.TextToLines(inputValue);\r\n    var i: number;\r\n    var j: number;\r\n    var k: number;\r\n\r\n    var context = {\r\n      isTabDelimited: this.textUtilsService.IsTabDelimited(lines),\r\n      regex: (null as string),\r\n      searchString: (null as string),\r\n      isColumnNumeric: (null as boolean[])\r\n    };\r\n\r\n    var currentValues: (string | string[])[] = lines;\r\n\r\n    for (i = 0; i < codeLines.length; i++) {\r\n\r\n      var parsedCommand = this.commandParsingService.ParseCodeLine(\r\n        codeLines[i]\r\n      );\r\n\r\n      var newValues: (string | string[])[] = [];\r\n\r\n      if (parsedCommand.commandType.name === \"flat|batch\") {\r\n\r\n        if (!parsedCommand.para || !this.textUtilsService.IsPositiveInteger(parsedCommand.para)) {\r\n          var flattened = [];\r\n\r\n          for (j = 0; j < currentValues.length; j++) {\r\n\r\n            if (isArray(currentValues[j])) {\r\n\r\n              for (k = 0; k < (currentValues[j] as string[]).length; k++) {\r\n                flattened.push(currentValues[j][k]);\r\n              }\r\n\r\n            } else {\r\n              flattened.push(currentValues[j]);\r\n            }\r\n          }\r\n\r\n          newValues[0] = flattened;\r\n        } else {\r\n          var batchSize = parseInt(parsedCommand.para, 10);\r\n          var batches = [];\r\n          \r\n          var flattened = [];\r\n\r\n          for (j = 0; j < currentValues.length; j++) {\r\n\r\n            if (isArray(currentValues[j])) {\r\n\r\n              for (k = 0; k < (currentValues[j] as string[]).length; k++) {\r\n                flattened.push(currentValues[j][k]);\r\n\r\n                if (flattened.length === batchSize) {\r\n                  batches.push(flattened);\r\n                  flattened = [];\r\n                }\r\n              }\r\n\r\n            } else {\r\n              flattened.push(currentValues[j]);\r\n\r\n              if (flattened.length === batchSize) {\r\n                batches.push(flattened);\r\n                flattened = [];\r\n              }\r\n            }\r\n          }\r\n          \r\n          if (flattened.length) {\r\n            batches.push(flattened);\r\n          }\r\n\r\n          newValues = batches;\r\n        }\r\n      } else {\r\n\r\n        if (parsedCommand.commandType.name === \"split\") {\r\n          context.isColumnNumeric = [];\r\n        }\r\n\r\n        for (j = 0; j < currentValues.length; j++) {\r\n          \r\n            const newLineValue = parsedCommand.commandType.exec(\r\n              currentValues[j], \r\n              parsedCommand.para, \r\n              context,\r\n              explain\r\n            );\r\n\r\n            if (newLineValue !== null) {\r\n              newValues.push(newLineValue);\r\n          }\r\n        }\r\n      }\r\n\r\n      currentValues = newValues;\r\n    }\r\n\r\n    var outputLines: string[] = [];\r\n\r\n    if (explain) {\r\n      for (i = 0; i < codeLines.length; i++) {\r\n        var parsedCommand = this.commandParsingService.ParseCodeLine(codeLines[i]);\r\n        var commandType = parsedCommand.commandType;\r\n        var para = parsedCommand.para;\r\n        var explanation = parsedCommand.commandType.exec(lines, para, context, true);\r\n        outputLines.push(explanation);\r\n      }\r\n  \r\n      return outputLines;\r\n    } else {\r\n\r\n      for (i = 0; i < currentValues.length; i++) {\r\n        var value = currentValues[i];\r\n        if (isArray(value)) {\r\n          var arrayValue = value as string[];\r\n          for (j = 0; j < arrayValue.length; j++) {\r\n            outputLines.push(arrayValue[j]);\r\n          }\r\n        } else {\r\n          outputLines.push(value as string);\r\n        }\r\n      }\r\n\r\n      return outputLines;\r\n    }\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { isArray } from \"util\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TextUtilsService {\r\n\r\n  constructor() { }\r\n\r\n  LinesToText(lines : string[]): string {\r\n    return lines.join(\"\\r\\n\");\r\n  }\r\n\r\n  TextToLines(text : string): string[] {\r\n    return text.trim().split(/\\n/);\r\n  }\r\n\r\n  IsNumeric(value) {\r\n    return /^-{0,1}\\d+$/.test(value);\r\n  }\r\n\r\n  IsPositiveInteger(value) {\r\n    return /^[1-9]\\d*$/.test(value);\r\n  }\r\n\r\n  AsArray(value : string | string[]): string[] {\r\n    if (isArray(value)) {\r\n      return (value as string[]);\r\n    } else {\r\n      return (value as string).split(/\\s+/);\r\n    }\r\n  }\r\n\r\n  AsScalar(value : string | string[]): string {\r\n    if (isArray(value)) {\r\n      return (value as string[])[0];\r\n    } else {\r\n      return (value as string);\r\n    }\r\n  }\r\n\r\n  ParseIntegers = function(para: string) : number[] {\r\n    var split = para.trim().split(/[^\\d\\-]+/);\r\n    var integers = [];\r\n    for (var i = 0; i < split.length; i++) {\r\n      integers.push(parseInt(split[i], 10));\r\n    }\r\n    return integers;\r\n  };\r\n  \r\n  IsTabDelimited = function(lines: string[]) {\r\n    var i: number;\r\n    var countTabs = function(line: string) {\r\n      return (line.match(/\\t/g) || []).length;\r\n    };\r\n    var tabsPerLine = countTabs(lines[0]);\r\n    if (tabsPerLine === 0) {\r\n      return false;\r\n    }\r\n    for (i = 0; i < lines.length; i++) {\r\n      if (countTabs(lines[i]) !== tabsPerLine) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  FormatDelimiter = function(delimiter: string, pluralise: boolean) {\r\n\r\n    var formatDelimiterSingular = function(delimiter: string) {\r\n      if (delimiter === \"\\t\") {\r\n        return \"tab\";\r\n      }\r\n      else if (delimiter === \" \") {\r\n        return \"space\";\r\n      }\r\n      else if (delimiter === \",\") {\r\n        return \"comma\";\r\n      }\r\n      else {\r\n        return \"'\" + delimiter + \"' character\";\r\n      }\r\n    };\r\n\r\n    var formattedDelimiter = formatDelimiterSingular(delimiter);\r\n\r\n    return pluralise ? formattedDelimiter + \"s\" : formattedDelimiter;\r\n  }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}