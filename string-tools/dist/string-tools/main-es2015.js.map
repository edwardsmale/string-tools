{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/command-parsing.service.ts","./src/app/command-types.service.ts","./src/app/command.service.ts","./src/app/text-utils.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { \r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  ElementRef,\r\n  AfterViewChecked } from \"@angular/core\";\r\nimport { CommandService } from './command.service';\r\nimport { TextUtilsService } from './text-utils.service';\r\n\r\n@Component({\r\n  selector: \"app-root\",\r\n  templateUrl: \"./app.component.html\",\r\n  styleUrls: [\"./app.component.scss\"]\r\n})\r\nexport class AppComponent implements OnInit, AfterViewChecked {\r\n  @ViewChild(\"codePane\") codePaneRef: ElementRef;\r\n  @ViewChild(\"inputPane\") inputPaneRef: ElementRef;\r\n  h1 = \"string-tools\";\r\n  outputValue = \"\";\r\n  explain = \"\";\r\n\r\n  constructor(private commandService : CommandService, private textUtilsService : TextUtilsService) {\r\n    this.commandService = commandService;\r\n    this.textUtilsService = textUtilsService;\r\n  }\r\n\r\n  ngOnInit() {  }\r\n\r\n  ngAfterViewChecked() {\r\n    this.UpdateExplanation(\r\n      this.codePaneRef.nativeElement.value, \r\n      this.inputPaneRef.nativeElement.value\r\n    );\r\n    this.ProcessClick(\r\n      this.codePaneRef.nativeElement.value, \r\n      this.inputPaneRef.nativeElement.value\r\n    );\r\n  }\r\n\r\n  UpdateExplanation(codeValue: string, inputValue: string) {\r\n    var lines = this.commandService.processCommands(codeValue, inputValue, true);\r\n    this.explain = this.textUtilsService.LinesToText(lines);\r\n  }\r\n\r\n  ProcessClick(codeValue: string, inputValue: string) {\r\n    var lines = this.commandService.processCommands(codeValue, inputValue, false);\r\n    this.outputValue = this.textUtilsService.LinesToText(lines);\r\n  }\r\n} ","<div>\r\n  <div class=\"string-tools\">\r\n    <div class=\"string-tools__top_section\">\r\n      <textarea class=\"code-window\" #codePane \r\n        (input)=\"UpdateExplanation(codePane.value, inputPane.value);ProcessClick(codePane.value, inputPane.value);\">\r\nsplit ,\r\nat 1, 2\r\ncsv '\r\nenclose\r\nflat\r\ncsv\r\nprint INSERT INTO Account (AccountRef, Company) VALUES $0</textarea>\r\n      <textarea class=\"explain-window\" readonly>{{ explain }}</textarea>\r\n    </div>\r\n    <div class=\"panes-container\">\r\n      <div class=\"pane pane--left\">\r\n        <textarea class=\"pane-textarea\" #inputPane\r\n          (input)=\"ProcessClick(codePane.value, inputPane.value);\">\r\n1,W22355,foo\r\n2,X13989,bar\r\n3,Y22492,baz\r\n        </textarea>\r\n      </div>\r\n      <div class=\"pane pane--right\" #outputPane>\r\n        <textarea class=\"pane-textarea\" readonly>{{ outputValue }}</textarea>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div> ","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\r\nimport { isArray } from \"util\";\r\nimport { TextUtilsService } from './text-utils.service';\r\nimport { CommandTypesService } from './command-types.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommandParsingService {\r\n\r\n  constructor(private textUtilsService : TextUtilsService, private commandTypesService : CommandTypesService) {\r\n    this.textUtilsService = textUtilsService;\r\n    this.commandTypesService = commandTypesService;\r\n  }\r\n\r\n  ParseCodeLine(codeLine: string) {\r\n    var codeLine = codeLine.trim();\r\n    if (codeLine.length === 0) {\r\n      return undefined;\r\n    } else {\r\n      var codeLineSplit = codeLine.split(/\\s+/);\r\n      var commandName = codeLineSplit[0];\r\n      var commandType = this.commandTypesService.FindCommandType(commandName);\r\n      var para = codeLine.replace(commandName, \"\").trim();\r\n      return {\r\n        commandType: commandType,\r\n        para: para\r\n      };\r\n    }\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { isArray } from \"util\";\r\nimport { TextUtilsService } from './text-utils.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommandTypesService {\r\n\r\n  constructor(private textUtilsService : TextUtilsService) { \r\n    this.textUtilsService = textUtilsService;\r\n  }\r\n\r\n  FindCommandType = function(name: string) {\r\n    var i: number;\r\n    for (i = 0; i < this.CommandTypes.length; i++) {\r\n      if (new RegExp(\"^\" + this.CommandTypes[i].name).test(name)) {\r\n        return this.CommandTypes[i];\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  CommandTypes = [\r\n    {\r\n      name: \"regex\",\r\n      desc: \"Sets the current regex\",\r\n      para: [\r\n        {\r\n          name: \"Regex\",\r\n          desc: \"String defining the regex\"\r\n        }\r\n      ],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        context.regex = this.textUtilsService.AsScalar(para);\r\n        context.searchString = null;\r\n        if (explain) {\r\n          return \"Set the current regex to \" + para;\r\n        } else {\r\n          return value;\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"searchString|search-string\",\r\n      desc: \"Sets the current search string\",\r\n      para: [\r\n        {\r\n          name: \"Search String\",\r\n          desc: \"The search string to set\"\r\n        }\r\n      ],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        context.searchString = this.textUtilsService.AsScalar(para);\r\n        context.regex = null;\r\n        if (explain) {\r\n          return \"Set the current search string to \" + para;\r\n        } else {\r\n          return value;\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"split\",\r\n      desc: \"Splits up the line of text.\",\r\n      para: [\r\n        {\r\n          name: \"Separator\",\r\n          desc: \"The string upon which to split.\"\r\n        }\r\n      ],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        value = this.textUtilsService.AsScalar(value);\r\n        var i: number;\r\n\r\n        if (!para && context.regex) {\r\n          if (explain) {\r\n            return \"Split the line using the regex \" + context.regex;\r\n          } else {\r\n            return (value as string).split(new RegExp(context.regex));\r\n          }\r\n        }\r\n        else if (!para && context.searchString) {\r\n          if (explain) {\r\n            return \"Split the line on '\" + context.searchString + \"'\";\r\n          } else {\r\n            return (value as string).split(context.searchString);\r\n          }\r\n        }\r\n        else {\r\n          var defaultDelimiter = context.isTabDelimited ? \"\\t\" : \",\";\r\n          para = para === \"\\\\t\" ? \"\\t\" : para;\r\n          var delimiter = para || defaultDelimiter;\r\n          \r\n          if (explain) {\r\n            var formattedDelimiter = this.textUtilsService.FormatDelimiter(delimiter, false);        \r\n            return \"Split the line on every \" + formattedDelimiter;\r\n          } else {\r\n\r\n            var splitValues = (value as string).split(new RegExp(delimiter));\r\n\r\n            for (i = 0; i < splitValues.length; i++) {\r\n              if (context.isColumnNumeric.length <= i) {\r\n                context.isColumnNumeric[i] = true;\r\n              }\r\n              \r\n              if (!this.textUtilsService.IsNumeric(splitValues[i])) {\r\n                context.isColumnNumeric[i] = false;\r\n              }\r\n            }\r\n\r\n            return splitValues;\r\n          }\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"match|filter\",\r\n      desc: \"Only lines which match a regex or search string\",\r\n      para: [\r\n        {\r\n          name: \"Search String\",\r\n          desc: \"The string which lines must contain\"\r\n        }\r\n      ],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n\r\n        var searchString = para || context.searchString;\r\n\r\n        if (!searchString && context.regex) {          \r\n          if (explain) {\r\n            return \"Only include lines matching the regex \" + context.regex;\r\n          } else {\r\n            if (isArray(value)) {\r\n              return (value as string[]).filter(function (val: string) { return new RegExp(context.regex).test(val); });\r\n            } else {\r\n              return new RegExp(context.regex).test(value as string) ? value : null;\r\n            }\r\n          }\r\n        }\r\n        else\r\n        {\r\n          if (explain) {\r\n            return \"Only include lines containing '\" + searchString + \"'\";\r\n          } else {\r\n            if (isArray(value)) {\r\n              return (value as string[]).filter(function (val: string) { return val.includes(searchString); });\r\n            } else {\r\n              return (value as string).includes(searchString) ? value : null;\r\n            }\r\n          }\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"nomatch|exclude\",\r\n      desc: \"Exclude lines that match a regex or search string\",\r\n      para: [\r\n        {\r\n          name: \"Regex\",\r\n          desc: \"The regex that lines must not match\"\r\n        }\r\n      ],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n\r\n        var regex = para || context.regex;\r\n\r\n        if (!regex && context.searchString) {\r\n          if (explain) {\r\n            return \"Exclude lines containing '\" + context.searchString + \"'\";\r\n          } else {\r\n            if (isArray(value)) {\r\n              return (value as string[]).filter(function (val: string) { return !val.includes(context.searchString); });\r\n            } else {\r\n              return (value as string).includes(context.searchString) ? null : value;\r\n            }\r\n          }\r\n        }\r\n        else\r\n        {\r\n          if (explain) {\r\n            return \"Exclude lines matching the regex \" + regex;\r\n          } else {\r\n            if (isArray(value)) {\r\n              return (value as string[]).filter(function (val: string) { return !new RegExp(regex).test(val); });\r\n            } else {\r\n              return new RegExp(regex).test(value as string) ? null : value;\r\n            }\r\n          }\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"at\",\r\n      desc: \"Selects specified columns from text that has been split.\",\r\n      para: [\r\n        {\r\n          name: \"Column Indices\",\r\n          desc: \"Zero-based. Use negatives to count back from the end.\"\r\n        }\r\n      ],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        if (explain) {\r\n          const indices = this.textUtilsService.ParseIntegers(para);\r\n          var positions: string[] = [];\r\n  \r\n          for (var i = 0; i < indices.length; i++) {\r\n            if (indices[i] >= 0) {\r\n              positions.push(\"[\" + indices[i].toString() + \"]\");\r\n            } else {\r\n              positions.push(\"[\" + Math.abs(indices[i]) + \" from the end\" + \"]\");\r\n            }\r\n          }\r\n          return \"Get the items at positions \" + positions.join(\" \");\r\n        } else {\r\n          value = this.textUtilsService.AsArray(value);\r\n          const indices = para.trim().split(/[^\\d\\-]+/);\r\n          var result = [];\r\n          var i: number;\r\n          for (i = 0; i < indices.length; i++) {\r\n            var index = parseInt(indices[i], 10);\r\n            if (index < 0) {\r\n              index = value.length + index;\r\n            }\r\n            if (index >= 0 && index < value.length) {\r\n              result.push(value[index]);\r\n            }\r\n          }\r\n\r\n          return result;\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"flat|batch\",\r\n      desc: \"Flattens an array of arrays into one array, or batches items into arrays of a given size\",\r\n      para: [        {\r\n        name: \"Batch Size\",\r\n        desc: \"If set, converts into batches of this size\"\r\n      }],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        if (explain) {\r\n          if (this.textUtilsService.IsNumeric(para)) {\r\n            return \"Convert into arrays of \" + para + \" items\";\r\n          } else {\r\n            return \"Flatten an array of arrays into one array\";\r\n          }\r\n        } else {\r\n          return value;\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"enclose\",\r\n      desc: \"Put some character(s) at the start and end of each line\",\r\n      para: [],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        var leftChar: string;\r\n        var rightChar: string;\r\n\r\n        if (para.length === 0) {\r\n          leftChar = \"(\";\r\n          rightChar = \")\";\r\n        } else if (para.length === 1) {\r\n          leftChar = para[0];\r\n          rightChar = para[0];\r\n        } else {\r\n          leftChar = para[0];\r\n          rightChar = para[1];          \r\n        }\r\n\r\n        if (explain) {\r\n          return \"Enclose each item in \" + leftChar + \"  \" + rightChar;\r\n        } else {\r\n          var scalarValue = this.textUtilsService.AsScalar(value);\r\n          return leftChar + scalarValue + rightChar;\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"tsv\",\r\n      desc: \"Tab-separates text that has been split.\",\r\n      para: [],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        if (explain) {\r\n          return \"Output the items in tab-separated format\";\r\n        } else {\r\n          value = this.textUtilsService.AsArray(value);\r\n          return (value as string[]).join(\"\\t\");\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"csv\",\r\n      desc: \"Delimits text which has been split.\",\r\n      para: [\r\n        {\r\n          name: \"'\",\r\n          desc: \"Enclose values in single quotes.\"\r\n        },\r\n        {\r\n          name: '\"',\r\n          desc: \"Enclose values in double quotes.\"\r\n        },\r\n        {\r\n          name: \"@\",\r\n          desc:\r\n            \"When values are enclosed in double quotes, precede \" +\r\n            \"opening double quotes with the @ symbol.\"\r\n        },\r\n        {\r\n          name: \"\\\\\",\r\n          desc:\r\n            \"When values are enclosed in double quotes, escape \" +\r\n            \"any double quotes within values with a backslash.\"\r\n        },\r\n        {\r\n          name: \"<anything else>\",\r\n          desc: \"The character(s) to use as the delimiter.\"\r\n        }\r\n      ],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        value = this.textUtilsService.AsArray(value);\r\n\r\n        var options = {\r\n          isDoubleQuote: para.includes('\"'),\r\n          isSingleQuote: para.includes(\"'\"),\r\n          isAtString: para.includes(\"@\"),\r\n          isEscaped: para.includes(\"\\\\\"),\r\n          delimiter: para.replace(/[\"'\\\\@]+/, \"\") || \",\"\r\n        };\r\n\r\n        if (para.includes(\"\\\\t\")) {\r\n          options.delimiter = \"\\t\";\r\n        }\r\n\r\n        if (explain) {\r\n\r\n          var explanation = \"Output the items\";\r\n\r\n          if (options.delimiter === \",\") {\r\n            explanation += \" in CSV format\";\r\n          } else {\r\n            var formattedDelimiter = this.textUtilsService.FormatDelimiter(options.delimiter, true);\r\n            explanation += \" separated with \" + formattedDelimiter;\r\n          }\r\n  \r\n          if (options.isDoubleQuote) {\r\n            explanation += \", with values in double quotes\"\r\n  \r\n            if (options.isAtString) {\r\n              explanation += \" preceded by @\"\r\n            }\r\n  \r\n            if (options.isEscaped) {\r\n              explanation += \", backslash-escaping any double quotes\";\r\n            } else {\r\n              explanation += \", doubling-up any double quotes\";\r\n            }\r\n          }\r\n          else if (options.isSingleQuote) {\r\n            explanation += \", with values in single quotes\"\r\n          }\r\n  \r\n          return explanation;\r\n\r\n        } else {\r\n\r\n          var toDelimitedString = function(value: string[], options) {\r\n            var result = [];\r\n            var i: number;\r\n            for (i = 0; i < value.length; i++) {\r\n              var val = value[i];\r\n              if (options.isDoubleQuote) { // || val.includes(options.delimiter)) {\r\n                if (options.isEscaped) {\r\n                  // Replace \" with \\\"\r\n                  val = val.replace(new RegExp('\"'), '\\\\\"');\r\n                  val = '\"' + val + '\"';\r\n                } else {\r\n                  // Replace \" with \"\"\r\n                  val = val.replace(new RegExp('\"'), '\"\"');\r\n                  val = '\"' + val + '\"';\r\n                  if (options.isAtString) {\r\n                    val = \"@\" + val;\r\n                  }\r\n                }\r\n              } else if (options.isSingleQuote) {\r\n                val = val.replace(new RegExp(\"'\"), \"''\");\r\n                val = \"'\" + val + \"'\";\r\n              }\r\n              result.push(val);\r\n            }\r\n            return result.join(options.delimiter);\r\n          };\r\n        }\r\n\r\n        return toDelimitedString((value as string[]), options);\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"join\",\r\n      desc: \"Joins a split line of text back together.\",\r\n      para: [\r\n        {\r\n          name: \"delimiter\",\r\n          desc: \"The delimiter to insert between items (default is tab).\"\r\n        }\r\n      ],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        value = this.textUtilsService.AsArray(value);\r\n        var defaultDelimiter = context.isTabDelimited ? \"\\t\" : \" \";\r\n        para = para === \"\\\\t\" ? \"\\t\" : para;\r\n        var delimiter = para || defaultDelimiter;\r\n\r\n        if (explain) {\r\n          var formattedDelimiter = this.textUtilsService.FormatDelimiter(delimiter, true);\r\n          return \"Output items separated with \" + formattedDelimiter + \" - doesn't escape \" + formattedDelimiter + \" in values\";\r\n        } else {\r\n          return (value as string[]).join(delimiter);\r\n        }\r\n      }).bind(this)\r\n    },\r\n    {\r\n      name: \"print\",\r\n      desc: \"Prints output\",\r\n      para: [{ name: \"<text>\", desc: \"What to print.\" }],\r\n      exec: (function(value: string | string[], para: string, context: any, explain: boolean) {\r\n        if (explain) {\r\n          return \"print \" + para;\r\n        } else {\r\n          var result = para;\r\n          var i: number;\r\n          var arrayValue = isArray(value) ? (value as string[]) : ([ \"\", value ] as string[]);\r\n          \r\n          // Replace $0 with the whole value.\r\n          result = result.replace(new RegExp(\"\\\\$0\", \"g\"), arrayValue.join(\"\"));\r\n          \r\n          // Replace $1..$9 with the value at index 1..9.\r\n          for (i = 1; i <= 9; i++) {\r\n            if (i <= arrayValue.length) {\r\n              result = result.replace(new RegExp(\"\\\\$\" + i, \"g\"), arrayValue[i - 1]);\r\n            }\r\n          }\r\n          // Replace $-1..$-9 with the value -1..-9 from the end.\r\n          for (i = 1; i <= 9; i++) {\r\n            if (arrayValue.length - i >= 0) {\r\n              result = result.replace(\r\n                new RegExp(\"\\\\$-\" + i, \"g\"),\r\n                arrayValue[arrayValue.length - i]\r\n              );\r\n            }\r\n          }\r\n          // Replace $A..$Z and $a..$z with the value at index 10..35.\r\n          for (i = 0; i < 26; i++) {\r\n            if (i + 10 < arrayValue.length) {\r\n              result = result.replace(\r\n                new RegExp(\r\n                  \"\\\\$[\" +\r\n                    String.fromCharCode(i + 65) +\r\n                    String.fromCharCode(i + 97) +\r\n                    \"]\",\r\n                  \"g\"\r\n                ),\r\n                arrayValue[i + 10]\r\n              );\r\n            }\r\n          }\r\n          return result;\r\n        }\r\n      }).bind(this)\r\n    }\r\n  ];  \r\n}","import { Injectable } from '@angular/core';\r\nimport { isArray } from \"util\";\r\nimport { TextUtilsService } from './text-utils.service';\r\nimport { CommandParsingService } from './command-parsing.service';\r\nimport { CommandTypesService } from './command-types.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommandService {\r\n\r\n  constructor(private textUtilsService : TextUtilsService, private commandParsingService : CommandParsingService, private commandTypesService : CommandTypesService) {\r\n    this.textUtilsService = textUtilsService;\r\n    this.commandParsingService = commandParsingService;\r\n    this.commandTypesService = commandTypesService;\r\n  }\r\n  \r\n  processCommands(codeValue: string, inputValue: string, explain: boolean): string[] {\r\n    var codeLines = this.textUtilsService.TextToLines(codeValue);\r\n    var lines = this.textUtilsService.TextToLines(inputValue);\r\n    var i: number;\r\n    var j: number;\r\n    var k: number;\r\n\r\n    var context = {\r\n      isTabDelimited: this.textUtilsService.IsTabDelimited(lines),\r\n      regex: (null as string),\r\n      searchString: (null as string),\r\n      isColumnNumeric: (null as boolean[])\r\n    };\r\n\r\n    var currentValues: (string | string[])[] = lines;\r\n\r\n    for (i = 0; i < codeLines.length; i++) {\r\n\r\n      var parsedCommand = this.commandParsingService.ParseCodeLine(\r\n        codeLines[i]\r\n      );\r\n\r\n      var newValues: (string | string[])[] = [];\r\n\r\n      if (parsedCommand.commandType.name === \"flat|batch\") {\r\n\r\n        if (!parsedCommand.para || !this.textUtilsService.IsPositiveInteger(parsedCommand.para)) {\r\n          var flattened = [];\r\n\r\n          for (j = 0; j < currentValues.length; j++) {\r\n\r\n            if (isArray(currentValues[j])) {\r\n\r\n              for (k = 0; k < (currentValues[j] as string[]).length; k++) {\r\n                flattened.push(currentValues[j][k]);\r\n              }\r\n\r\n            } else {\r\n              flattened.push(currentValues[j]);\r\n            }\r\n          }\r\n\r\n          newValues[0] = flattened;\r\n        } else {\r\n          var batchSize = parseInt(parsedCommand.para, 10);\r\n          var batches = [];\r\n          \r\n          var flattened = [];\r\n\r\n          for (j = 0; j < currentValues.length; j++) {\r\n\r\n            if (isArray(currentValues[j])) {\r\n\r\n              for (k = 0; k < (currentValues[j] as string[]).length; k++) {\r\n                flattened.push(currentValues[j][k]);\r\n\r\n                if (flattened.length === batchSize) {\r\n                  batches.push(flattened);\r\n                  flattened = [];\r\n                }\r\n              }\r\n\r\n            } else {\r\n              flattened.push(currentValues[j]);\r\n\r\n              if (flattened.length === batchSize) {\r\n                batches.push(flattened);\r\n                flattened = [];\r\n              }\r\n            }\r\n          }\r\n          \r\n          if (flattened.length) {\r\n            batches.push(flattened);\r\n          }\r\n\r\n          newValues = batches;\r\n        }\r\n      } else {\r\n\r\n        if (parsedCommand.commandType.name === \"split\") {\r\n          context.isColumnNumeric = [];\r\n        }\r\n\r\n        for (j = 0; j < currentValues.length; j++) {\r\n          \r\n            const newLineValue = parsedCommand.commandType.exec(\r\n              currentValues[j], \r\n              parsedCommand.para, \r\n              context,\r\n              explain\r\n            );\r\n\r\n            if (newLineValue !== null) {\r\n              newValues.push(newLineValue);\r\n          }\r\n        }\r\n      }\r\n\r\n      currentValues = newValues;\r\n    }\r\n\r\n    var outputLines: string[] = [];\r\n\r\n    if (explain) {\r\n      for (i = 0; i < codeLines.length; i++) {\r\n        var parsedCommand = this.commandParsingService.ParseCodeLine(codeLines[i]);\r\n        var commandType = parsedCommand.commandType;\r\n        var para = parsedCommand.para;\r\n        var explanation = parsedCommand.commandType.exec(lines, para, context, true);\r\n        outputLines.push(explanation);\r\n      }\r\n  \r\n      return outputLines;\r\n    } else {\r\n\r\n      for (i = 0; i < currentValues.length; i++) {\r\n        var value = currentValues[i];\r\n        if (isArray(value)) {\r\n          var arrayValue = value as string[];\r\n          for (j = 0; j < arrayValue.length; j++) {\r\n            outputLines.push(arrayValue[j]);\r\n          }\r\n        } else {\r\n          outputLines.push(value as string);\r\n        }\r\n      }\r\n\r\n      return outputLines;\r\n    }\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { isArray } from \"util\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TextUtilsService {\r\n\r\n  constructor() { }\r\n\r\n  LinesToText(lines : string[]): string {\r\n    return lines.join(\"\\r\\n\");\r\n  }\r\n\r\n  TextToLines(text : string): string[] {\r\n    return text.trim().split(/\\n/);\r\n  }\r\n\r\n  IsNumeric(value) {\r\n    return /^-{0,1}\\d+$/.test(value);\r\n  }\r\n\r\n  IsPositiveInteger(value) {\r\n    return /^[1-9]\\d*$/.test(value);\r\n  }\r\n\r\n  AsArray(value : string | string[]): string[] {\r\n    if (isArray(value)) {\r\n      return (value as string[]);\r\n    } else {\r\n      return (value as string).split(/\\s+/);\r\n    }\r\n  }\r\n\r\n  AsScalar(value : string | string[]): string {\r\n    if (isArray(value)) {\r\n      return (value as string[])[0];\r\n    } else {\r\n      return (value as string);\r\n    }\r\n  }\r\n\r\n  ParseIntegers = function(para: string) : number[] {\r\n    var split = para.trim().split(/[^\\d\\-]+/);\r\n    var integers = [];\r\n    for (var i = 0; i < split.length; i++) {\r\n      integers.push(parseInt(split[i], 10));\r\n    }\r\n    return integers;\r\n  };\r\n  \r\n  IsTabDelimited = function(lines: string[]) {\r\n    var i: number;\r\n    var countTabs = function(line: string) {\r\n      return (line.match(/\\t/g) || []).length;\r\n    };\r\n    var tabsPerLine = countTabs(lines[0]);\r\n    if (tabsPerLine === 0) {\r\n      return false;\r\n    }\r\n    for (i = 0; i < lines.length; i++) {\r\n      if (countTabs(lines[i]) !== tabsPerLine) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  FormatDelimiter = function(delimiter: string, pluralise: boolean) {\r\n\r\n    var formatDelimiterSingular = function(delimiter: string) {\r\n      if (delimiter === \"\\t\") {\r\n        return \"tab\";\r\n      }\r\n      else if (delimiter === \" \") {\r\n        return \"space\";\r\n      }\r\n      else if (delimiter === \",\") {\r\n        return \"comma\";\r\n      }\r\n      else {\r\n        return \"'\" + delimiter + \"' character\";\r\n      }\r\n    };\r\n\r\n    var formattedDelimiter = formatDelimiterSingular(delimiter);\r\n\r\n    return pluralise ? formattedDelimiter + \"s\" : formattedDelimiter;\r\n  }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}